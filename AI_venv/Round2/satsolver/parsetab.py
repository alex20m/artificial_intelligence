
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESrightEQVIrightIMPLleftANDORXORleftNOTAND ATLEAST ATMOST COLON COMMA EQ EQVI EXACTLY FORALL FORSOME GEQ GT ID IMPL LBRACE LBRACK LEQ LPAREN LT MINUS NID NOT NUMBER OR PLUS PREDICATES RBRACE RBRACK RPAREN SEMICOLON SLASH TIMES TYPE VARIABLES XORspec : statement\n| statement specstatement : PREDICATES predlist SEMICOLONpredlist : ID SLASH NUMBERpredlist : ID SLASH NUMBER COMMA predliststatement : VARIABLES idlist SEMICOLONidlist : IDidlist : ID COMMA idliststatement : TYPE ID EQ setexpr SEMICOLONstatement : boolexpr SEMICOLONsetexpr : LBRACK NUMBER COMMA NUMBER RBRACKsetexpr : LBRACE stringlist RBRACEsetexpr : IDstringlist : enumenum : ID\n| NUMBERstringlist : enum COMMA stringlistboolexpr : boolexpr AND boolexprboolexpr : boolexpr OR boolexprboolexpr : boolexpr XOR boolexprboolexpr : boolexpr IMPL boolexprboolexpr : boolexpr EQVI boolexprboolexpr : FORSOME LPAREN paramlist RPAREN boolexprboolexpr : FORALL LPAREN paramlist RPAREN boolexprboolexpr : ATMOST NUMBER LPAREN paramlist RPAREN boolexprboolexpr : ATLEAST NUMBER LPAREN paramlist RPAREN boolexprboolexpr : EXACTLY NUMBER LPAREN paramlist RPAREN boolexprboolexpr : NOT boolexprboolexpr : atomboolexpr : LPAREN boolexpr RPARENboolexpr : numexpr GT numexpr\n| numexpr LT numexpr\n| numexpr GEQ numexpr\n| numexpr LEQ numexpr\n| numexpr EQ numexprparamlist : paramparamlist : param COMMA paramlistparam : ID COLON setexprnumexpr : LPAREN numexpr RPARENnumexpr : NUMBERnumexpr : NIDnumexpr : numexpr PLUS numexpr\n| numexpr MINUS numexpr\n| numexpr TIMES numexprtermlist : term COMMA termlisttermlist : termterm : numexpratom : IDatom : ID LPAREN termlist RPAREN'
    
_lr_action_items = {'PREDICATES':([0,2,26,48,50,96,],[3,3,-10,-3,-6,-9,]),'VARIABLES':([0,2,26,48,50,96,],[4,4,-10,-3,-6,-9,]),'TYPE':([0,2,26,48,50,96,],[5,5,-10,-3,-6,-9,]),'FORSOME':([0,2,9,15,26,27,28,29,30,31,48,50,88,91,96,107,108,109,],[8,8,8,8,-10,8,8,8,8,8,-3,-6,8,8,-9,8,8,8,]),'FORALL':([0,2,9,15,26,27,28,29,30,31,48,50,88,91,96,107,108,109,],[10,10,10,10,-10,10,10,10,10,10,-3,-6,10,10,-9,10,10,10,]),'ATMOST':([0,2,9,15,26,27,28,29,30,31,48,50,88,91,96,107,108,109,],[11,11,11,11,-10,11,11,11,11,11,-3,-6,11,11,-9,11,11,11,]),'ATLEAST':([0,2,9,15,26,27,28,29,30,31,48,50,88,91,96,107,108,109,],[13,13,13,13,-10,13,13,13,13,13,-3,-6,13,13,-9,13,13,13,]),'EXACTLY':([0,2,9,15,26,27,28,29,30,31,48,50,88,91,96,107,108,109,],[14,14,14,14,-10,14,14,14,14,14,-3,-6,14,14,-9,14,14,14,]),'NOT':([0,2,9,15,26,27,28,29,30,31,48,50,88,91,96,107,108,109,],[15,15,15,15,-10,15,15,15,15,15,-3,-6,15,15,-9,15,15,15,]),'LPAREN':([0,2,6,8,9,10,15,25,26,27,28,29,30,31,36,37,38,40,41,42,43,44,45,46,47,48,50,53,87,88,91,96,107,108,109,],[9,9,25,32,9,35,9,53,-10,9,9,9,9,9,68,69,70,53,53,53,53,53,53,53,53,-3,-6,53,53,9,9,-9,9,9,9,]),'ID':([0,2,3,4,5,9,15,26,27,28,29,30,31,32,35,48,50,51,52,68,69,70,84,88,89,90,91,95,96,107,108,109,113,],[6,6,21,23,24,6,6,-10,6,6,6,6,6,64,64,-3,-6,23,81,64,64,64,100,6,64,81,6,21,-9,6,6,6,100,]),'NUMBER':([0,2,9,11,13,14,15,25,26,27,28,29,30,31,40,41,42,43,44,45,46,47,48,49,50,53,83,84,87,88,91,96,107,108,109,111,113,],[12,12,12,36,37,38,12,12,-10,12,12,12,12,12,12,12,12,12,12,12,12,12,-3,79,-6,12,97,101,12,12,12,-9,12,12,12,117,101,]),'NID':([0,2,9,15,25,26,27,28,29,30,31,40,41,42,43,44,45,46,47,48,50,53,87,88,91,96,107,108,109,],[18,18,18,18,18,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,-3,-6,18,18,18,18,-9,18,18,18,]),'$end':([1,2,19,26,48,50,96,],[0,-1,-2,-10,-3,-6,-9,]),'SEMICOLON':([6,7,12,16,18,20,22,23,39,57,58,59,60,61,65,66,71,72,73,74,75,76,77,78,79,80,81,82,86,103,106,110,112,114,115,116,119,],[-48,26,-40,-29,-41,48,50,-7,-28,-18,-19,-20,-21,-22,-30,-39,-31,-32,-33,-34,-35,-42,-43,-44,-4,-8,-13,96,-49,-23,-24,-5,-12,-25,-26,-27,-11,]),'AND':([6,7,12,16,18,33,39,57,58,59,60,61,65,66,71,72,73,74,75,76,77,78,86,103,106,114,115,116,],[-48,27,-40,-29,-41,27,-28,-18,-19,-20,27,27,-30,-39,-31,-32,-33,-34,-35,-42,-43,-44,-49,27,27,27,27,27,]),'OR':([6,7,12,16,18,33,39,57,58,59,60,61,65,66,71,72,73,74,75,76,77,78,86,103,106,114,115,116,],[-48,28,-40,-29,-41,28,-28,-18,-19,-20,28,28,-30,-39,-31,-32,-33,-34,-35,-42,-43,-44,-49,28,28,28,28,28,]),'XOR':([6,7,12,16,18,33,39,57,58,59,60,61,65,66,71,72,73,74,75,76,77,78,86,103,106,114,115,116,],[-48,29,-40,-29,-41,29,-28,-18,-19,-20,29,29,-30,-39,-31,-32,-33,-34,-35,-42,-43,-44,-49,29,29,29,29,29,]),'IMPL':([6,7,12,16,18,33,39,57,58,59,60,61,65,66,71,72,73,74,75,76,77,78,86,103,106,114,115,116,],[-48,30,-40,-29,-41,30,-28,-18,-19,-20,30,30,-30,-39,-31,-32,-33,-34,-35,-42,-43,-44,-49,30,30,30,30,30,]),'EQVI':([6,7,12,16,18,33,39,57,58,59,60,61,65,66,71,72,73,74,75,76,77,78,86,103,106,114,115,116,],[-48,31,-40,-29,-41,31,-28,-18,-19,-20,-21,31,-30,-39,-31,-32,-33,-34,-35,-42,-43,-44,-49,31,31,31,31,31,]),'RPAREN':([6,12,16,18,33,34,39,54,55,56,57,58,59,60,61,62,63,65,66,67,71,72,73,74,75,76,77,78,81,85,86,92,93,94,102,103,104,105,106,112,114,115,116,119,],[-48,-40,-29,-41,65,66,-28,86,-46,-47,-18,-19,-20,-21,-22,88,-36,-30,-39,91,-31,-32,-33,-34,-35,-42,-43,-44,-13,66,-49,107,108,109,-45,-23,-37,-38,-24,-12,-25,-26,-27,-11,]),'GT':([12,17,18,34,66,76,77,78,],[-40,40,-41,40,-39,-42,-43,-44,]),'LT':([12,17,18,34,66,76,77,78,],[-40,41,-41,41,-39,-42,-43,-44,]),'GEQ':([12,17,18,34,66,76,77,78,],[-40,42,-41,42,-39,-42,-43,-44,]),'LEQ':([12,17,18,34,66,76,77,78,],[-40,43,-41,43,-39,-42,-43,-44,]),'EQ':([12,17,18,24,34,66,76,77,78,],[-40,44,-41,52,44,-39,-42,-43,-44,]),'PLUS':([12,17,18,34,56,66,71,72,73,74,75,76,77,78,85,],[-40,45,-41,45,45,-39,45,45,45,45,45,-42,-43,-44,45,]),'MINUS':([12,17,18,34,56,66,71,72,73,74,75,76,77,78,85,],[-40,46,-41,46,46,-39,46,46,46,46,46,-42,-43,-44,46,]),'TIMES':([12,17,18,34,56,66,71,72,73,74,75,76,77,78,85,],[-40,47,-41,47,47,-39,47,47,47,47,47,47,47,-44,47,]),'COMMA':([12,18,23,55,56,63,66,76,77,78,79,81,97,99,100,101,105,112,119,],[-40,-41,51,87,-47,89,-39,-42,-43,-44,95,-13,111,113,-15,-16,-38,-12,-11,]),'SLASH':([21,],[49,]),'LBRACK':([52,90,],[83,83,]),'LBRACE':([52,90,],[84,84,]),'COLON':([64,],[90,]),'RBRACE':([98,99,100,101,118,],[112,-14,-15,-16,-17,]),'RBRACK':([117,],[119,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'spec':([0,2,],[1,19,]),'statement':([0,2,],[2,2,]),'boolexpr':([0,2,9,15,27,28,29,30,31,88,91,107,108,109,],[7,7,33,39,57,58,59,60,61,103,106,114,115,116,]),'atom':([0,2,9,15,27,28,29,30,31,88,91,107,108,109,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'numexpr':([0,2,9,15,25,27,28,29,30,31,40,41,42,43,44,45,46,47,53,87,88,91,107,108,109,],[17,17,34,17,56,17,17,17,17,17,71,72,73,74,75,76,77,78,85,56,17,17,17,17,17,]),'predlist':([3,95,],[20,110,]),'idlist':([4,51,],[22,80,]),'termlist':([25,87,],[54,102,]),'term':([25,87,],[55,55,]),'paramlist':([32,35,68,69,70,89,],[62,67,92,93,94,104,]),'param':([32,35,68,69,70,89,],[63,63,63,63,63,63,]),'setexpr':([52,90,],[82,105,]),'stringlist':([84,113,],[98,118,]),'enum':([84,113,],[99,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> spec","S'",1,None,None,None),
  ('spec -> statement','spec',1,'p_spec','fparser.py',155),
  ('spec -> statement spec','spec',2,'p_spec','fparser.py',156),
  ('statement -> PREDICATES predlist SEMICOLON','statement',3,'p_predicates_definition','fparser.py',162),
  ('predlist -> ID SLASH NUMBER','predlist',3,'p_predlist1','fparser.py',167),
  ('predlist -> ID SLASH NUMBER COMMA predlist','predlist',5,'p_predlistN','fparser.py',171),
  ('statement -> VARIABLES idlist SEMICOLON','statement',3,'p_variables_definition','fparser.py',177),
  ('idlist -> ID','idlist',1,'p_idlist1','fparser.py',181),
  ('idlist -> ID COMMA idlist','idlist',3,'p_idlistN','fparser.py',185),
  ('statement -> TYPE ID EQ setexpr SEMICOLON','statement',5,'p_type_definition','fparser.py',192),
  ('statement -> boolexpr SEMICOLON','statement',2,'p_formula','fparser.py',198),
  ('setexpr -> LBRACK NUMBER COMMA NUMBER RBRACK','setexpr',5,'p_setexpr_interval','fparser.py',202),
  ('setexpr -> LBRACE stringlist RBRACE','setexpr',3,'p_setexpr_enumed','fparser.py',206),
  ('setexpr -> ID','setexpr',1,'p_setexpr_named','fparser.py',210),
  ('stringlist -> enum','stringlist',1,'p_stringlist1','fparser.py',214),
  ('enum -> ID','enum',1,'p_enum','fparser.py',218),
  ('enum -> NUMBER','enum',1,'p_enum','fparser.py',219),
  ('stringlist -> enum COMMA stringlist','stringlist',3,'p_stringlistN','fparser.py',223),
  ('boolexpr -> boolexpr AND boolexpr','boolexpr',3,'p_boolexpr_and','fparser.py',229),
  ('boolexpr -> boolexpr OR boolexpr','boolexpr',3,'p_boolexpr_or','fparser.py',233),
  ('boolexpr -> boolexpr XOR boolexpr','boolexpr',3,'p_boolexpr_xor','fparser.py',237),
  ('boolexpr -> boolexpr IMPL boolexpr','boolexpr',3,'p_boolexpr_impl','fparser.py',241),
  ('boolexpr -> boolexpr EQVI boolexpr','boolexpr',3,'p_boolexpr_eqvi','fparser.py',245),
  ('boolexpr -> FORSOME LPAREN paramlist RPAREN boolexpr','boolexpr',5,'p_boolexpr_quant_ex','fparser.py',251),
  ('boolexpr -> FORALL LPAREN paramlist RPAREN boolexpr','boolexpr',5,'p_boolexpr_quant_un','fparser.py',255),
  ('boolexpr -> ATMOST NUMBER LPAREN paramlist RPAREN boolexpr','boolexpr',6,'p_boolexpr_quant_atmost','fparser.py',261),
  ('boolexpr -> ATLEAST NUMBER LPAREN paramlist RPAREN boolexpr','boolexpr',6,'p_boolexpr_quant_atleast','fparser.py',265),
  ('boolexpr -> EXACTLY NUMBER LPAREN paramlist RPAREN boolexpr','boolexpr',6,'p_boolexpr_quant_exactly','fparser.py',269),
  ('boolexpr -> NOT boolexpr','boolexpr',2,'p_boolexpr_unop','fparser.py',275),
  ('boolexpr -> atom','boolexpr',1,'p_boolexpr_atom','fparser.py',279),
  ('boolexpr -> LPAREN boolexpr RPAREN','boolexpr',3,'p_boolexpr_parentheses','fparser.py',283),
  ('boolexpr -> numexpr GT numexpr','boolexpr',3,'p_boolexpr_numrel','fparser.py',287),
  ('boolexpr -> numexpr LT numexpr','boolexpr',3,'p_boolexpr_numrel','fparser.py',288),
  ('boolexpr -> numexpr GEQ numexpr','boolexpr',3,'p_boolexpr_numrel','fparser.py',289),
  ('boolexpr -> numexpr LEQ numexpr','boolexpr',3,'p_boolexpr_numrel','fparser.py',290),
  ('boolexpr -> numexpr EQ numexpr','boolexpr',3,'p_boolexpr_numrel','fparser.py',291),
  ('paramlist -> param','paramlist',1,'p_paramlist1','fparser.py',297),
  ('paramlist -> param COMMA paramlist','paramlist',3,'p_paramlistN','fparser.py',301),
  ('param -> ID COLON setexpr','param',3,'p_param','fparser.py',305),
  ('numexpr -> LPAREN numexpr RPAREN','numexpr',3,'p_numexpr_parentheses','fparser.py',311),
  ('numexpr -> NUMBER','numexpr',1,'p_numexpr1','fparser.py',315),
  ('numexpr -> NID','numexpr',1,'p_numexpr2','fparser.py',319),
  ('numexpr -> numexpr PLUS numexpr','numexpr',3,'p_numexpr','fparser.py',323),
  ('numexpr -> numexpr MINUS numexpr','numexpr',3,'p_numexpr','fparser.py',324),
  ('numexpr -> numexpr TIMES numexpr','numexpr',3,'p_numexpr','fparser.py',325),
  ('termlist -> term COMMA termlist','termlist',3,'p_termlistN','fparser.py',333),
  ('termlist -> term','termlist',1,'p_termlist1','fparser.py',337),
  ('term -> numexpr','term',1,'p_term_numeric','fparser.py',343),
  ('atom -> ID','atom',1,'p_atom0','fparser.py',350),
  ('atom -> ID LPAREN termlist RPAREN','atom',4,'p_atom','fparser.py',354),
]
